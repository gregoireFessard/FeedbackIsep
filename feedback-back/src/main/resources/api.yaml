openapi: 3.0.0
# Added by API Auto Mocking Plugin
info:
  version: "1.0.0"
  title: FeedBack
  contact:
    email: kevin.tan@isep.fr
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: user
    description: Operations on users
  - name: comment
    description: Operations on comments
  - name: message
    description: Operations on messages
  - name: course
    description: Operations on courses
  - name: courseDocument
    description: Operations on course documents
  - name: courseMaterial
    description: Operations on course materials

paths:
  /users:
    get:
      tags:
        - user
      summary: Search an user
      parameters:
        - name: search
          in: query
          description: Name of the user to search
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      summary: Update an user
      description: This can only be done by the logged in user.
      operationId: updateUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  '/users/{userId}':
    get:
      tags:
        - user
      summary: Get user by id
      parameters:
        - name: userId
          in: path
          description: The id that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found

    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
  '/courses':
    get:
      tags:
        - course
      summary: Get user's courses
      description: Get user's courses
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '404':
          description: User not found
    post:
      tags:
        - course
      summary: Create a course
      description: Create a course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
  '/courses/{courseId}/courseDocuments':
    get:
      tags:
        - courseDocument
      summary: Get documents of a course
      description: Get documents of a course
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
          description: id of the course
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDocument'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDocument'
    post:
      tags:
        - courseDocument
      summary: Create a course document
      description: Create a course document
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
          description: id of the course to add a document to
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDocument'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDocument'
            application/xml:
              schema:
                $ref: '#/components/schemas/CourseDocument'
  '/courses/{courseId}/courseDocuments/{documentId}':
    delete:
      tags:
        - courseDocument
      summary: Deletes a document
      description: Deletes a document
      parameters:
        - name: courseId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
        - name: documentId
          in: path
          description: id of the document to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '404':
          description:  Course or document not found
  '/courses/{courseId}/comments':
    get:
      tags:
        - comment
      summary: Get comments of a course
      description: Get comments of a course
      parameters:
        - name: courseId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description:  course not found
    post:
      tags:
        - comment
      summary: Post a comment to a course
      description: Post a comment to a course
      parameters:
        - name: courseId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description:  course not found
  '/courses/{courseId}/comments/{commentId}':
    post:
      tags:
        - comment
      summary: Reply to a comment
      description: Reply to a comment
      parameters:
        - name: courseId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: User, course or comment not found
    put:
      tags:
        - comment
      summary: Modify a comment
      description: Modify a comment
      parameters:
        - name: courseId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description:  course or comment not found
  '/courses/{courseId}/comments/{commentId}/like':
    post:
      tags:
        - comment
      summary: Like a comment
      description: Like to a comment
      parameters:
        - name: courseId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '404':
          description: User, course or comment not found
  '/courses/{courseId}/comments/{commentId}/dislike':
    post:
      tags:
        - comment
      summary: Dislike a comment
      description: Dislike to a comment
      parameters:
        - name: courseId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: id of the course
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '404':
          description: User, course or comment not found

  '/conversations':
    post:
      tags:
        - messages
      summary: Create a conversation
      description: Create a conversation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                conversation:
                  $ref: '#/components/schemas/Conversation'
                message:
                  $ref: '#/components/schemas/Message'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation:
                    $ref: '#/components/schemas/Conversation'
                  message:
                    $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                type: object
                properties:
                  conversation:
                    $ref: '#/components/schemas/Conversation'
                  message:
                    $ref: '#/components/schemas/Message'
    get:
      tags:
        - messages
      summary: Get user's conversations
      description: Get user's conversations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        '404':
          description: User not found
  '/conversations/{conversationId}':
    delete:
      tags:
        - messages
      summary: Deletes a conversation
      description: Deletes a conversation
      parameters:
        - name: conversationId
          in: path
          description: id of the conversation to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '404':
          description:  Conversation not found
  '/conversations/{conversationId}/messages':
    post:
      tags:
        - messages
      summary: Reply to a conversation
      description: Reply to a conversation
      parameters:
        - name: conversationId
          in: path
          description: id of the conversation to reply to
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description:  Message not found
    get:
      tags:
        - messages
      summary: Get user's messages of a conversation
      description: Get user's messages of a conversation
      parameters:
        - name: conversationId
          in: path
          description: id of the conversation to reply to
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description:  conversation not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        enabled:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        isep_id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        avatar:
          type: string
        color:
          type: string
        parent_id:
          type: int
      xml:
        name: User
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
        teacher_id:
          type: integer
          format: int64
        material_id:
          type: integer
          format: int64
        dateTime:
          type: string
        duration:
          type: string
      xml:
        name: Course
    UserCourse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: string
        course_id:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        course_id:
          type: integer
          format: int64
        content:
          type: string
        dateTime:
          type: string
        number_like:
          type: integer
        number_dislike:
          type: integer
        parent_id:
          type: string
      xml:
        name: Comment
    CourseDocument:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        document:
          type: string
        user_id:
          type: integer
        course_id:
          type: integer
      xml:
        name: CourseDocument
    CourseMaterial:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        conversation_id:
          type: integer
          format: int64
        is_from_sender:
          type: boolean
        content:
          type: string
        read:
          type: boolean
        dateTime:
          type: string
    Conversation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        from_id:
          type: integer
          format: int64
        to_id:
          type: integer
          format: int64
        subject:
          type: string
        status:
          type: string
        dateTime:
          type: string

